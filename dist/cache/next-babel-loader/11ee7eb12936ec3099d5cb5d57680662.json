{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar initState = {\n  count: 0\n};\n\nfunction countReducer() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : initState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  switch (action.type) {\n    case 'add':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: state.count + 1\n      });\n\n    case 'minus':\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: state.count - 1\n      });\n\n    default:\n      return state;\n  }\n}\n\nexport default countReducer;","map":{"version":3,"sources":["D:/lx/next/demo2/store/reducer/countReducer.js"],"names":["initState","count","countReducer","state","action","type"],"mappings":";;;;;;AAAA,IAAMA,SAAS,GAAC;AACZC,EAAAA,KAAK,EAAC;AADM,CAAhB;;AAIA,SAASC,YAAT,GAA6C;AAAA,MAAvBC,KAAuB,uEAAjBH,SAAiB;AAAA,MAAPI,MAAO;;AACzC,UAAQA,MAAM,CAACC,IAAf;AACI,SAAK,KAAL;AACI,6CACOF,KADP;AAEIF,QAAAA,KAAK,EAACE,KAAK,CAACF,KAAN,GAAY;AAFtB;;AAIJ,SAAK,OAAL;AACI,6CACOE,KADP;AAEIF,QAAAA,KAAK,EAACE,KAAK,CAACF,KAAN,GAAY;AAFtB;;AAIJ;AACG,aAAOE,KAAP;AAZP;AAcH;;AAED,eAAeD,YAAf","sourcesContent":["const initState={\r\n    count:0\r\n}\r\n\r\nfunction countReducer(state=initState,action){\r\n    switch (action.type){\r\n        case 'add':\r\n            return {\r\n                ...state,\r\n                count:state.count+1\r\n            }\r\n        case 'minus':\r\n            return {\r\n                ...state,\r\n                count:state.count-1\r\n            }\r\n        default:\r\n           return state\r\n    }\r\n}\r\n\r\nexport default countReducer;"]},"metadata":{},"sourceType":"module"}